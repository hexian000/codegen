// Code generated by serialize.
// source: main.go
// DO NOT EDIT!

package main

import (
	"encoding/binary"
	"unsafe"
)

var _ = unsafe.Sizeof(0)

func (i *A) SerializeLen() (n int) {
	n += i.B.SerializeLen()
	for _, element := range i.a {
		n += element.SerializeLen()
	}
	n += 4 + len(i.s)
	n += 4
	for _, element := range i.ss {
		n += 4 + len(element)
	}
	n += 4
	for _, element := range i.sss {
		n += 4
		for _, element := range element {
			n += 4 + len(element)
		}
	}
	n += 4
	for key, value := range i.ms {
		n += 4 + len(key)
		n += 4 + len(value)
	}
	n += 4
	for key, value := range i.mms {
		n += 4 + len(key)
		n += 4
		for key, value := range value {
			n += 4 + len(key)
			n += 4 + len(value)
		}
	}
	n += 8
	n += i.C.SerializeLen()
	return
}

func (i *A) Serialize(b []byte, order binary.ByteOrder) {
	i.B.Serialize(b, order)
	b = b[i.B.SerializeLen():]
	for _, element := range i.a {
		element.Serialize(b, order)
		b = b[element.SerializeLen():]
	}
	_ = b[:4+len(i.s)]
	order.PutUint32(b, uint32(len(i.s)))
	b = b[4+copy(b[4:], i.s):]
	order.PutUint32(b, uint32(len(i.ss)))
	b = b[4:]
	for _, element := range i.ss {
		_ = b[:4+len(element)]
		order.PutUint32(b, uint32(len(element)))
		b = b[4+copy(b[4:], element):]
	}
	order.PutUint32(b, uint32(len(i.sss)))
	b = b[4:]
	for _, element := range i.sss {
		order.PutUint32(b, uint32(len(element)))
		b = b[4:]
		for _, element := range element {
			_ = b[:4+len(element)]
			order.PutUint32(b, uint32(len(element)))
			b = b[4+copy(b[4:], element):]
		}
	}
	order.PutUint32(b, uint32(len(i.ms)))
	b = b[4:]
	for key, value := range i.ms {
		_ = b[:4+len(key)]
		order.PutUint32(b, uint32(len(key)))
		b = b[4+copy(b[4:], key):]
		_ = b[:4+len(value)]
		order.PutUint32(b, uint32(len(value)))
		b = b[4+copy(b[4:], value):]
	}
	order.PutUint32(b, uint32(len(i.mms)))
	b = b[4:]
	for key, value := range i.mms {
		_ = b[:4+len(key)]
		order.PutUint32(b, uint32(len(key)))
		b = b[4+copy(b[4:], key):]
		order.PutUint32(b, uint32(len(value)))
		b = b[4:]
		for key, value := range value {
			_ = b[:4+len(key)]
			order.PutUint32(b, uint32(len(key)))
			b = b[4+copy(b[4:], key):]
			_ = b[:4+len(value)]
			order.PutUint32(b, uint32(len(value)))
			b = b[4+copy(b[4:], value):]
		}
	}
	order.PutUint64(b, uint64(i.si.uint64))
	b = b[8:]
	i.C.Serialize(b, order)
	b = b[i.C.SerializeLen():]
}

func (i *A) Deserialize(b []byte, order binary.ByteOrder) {
	i.B.Deserialize(b, order)
	b = b[i.B.SerializeLen():]
	for k := uint(0); k < 3; k++ {
		i.a[k].Deserialize(b, order)
		b = b[i.a[k].SerializeLen():]
	}
	{
		n := order.Uint32(b)
		i.s = string(b[4 : 4+n])
		b = b[4+n:]
	}
	{
		l := uint(order.Uint32(b[:4]))
		b = b[4:]
		i.ss = make([]string, l, l)
		b = b[l:]
		for k := uint(0); k < l; k++ {
			{
				n := order.Uint32(b)
				i.ss[k] = string(b[4 : 4+n])
				b = b[4+n:]
			}
		}
	}
	{
		l := uint(order.Uint32(b[:4]))
		b = b[4:]
		i.sss = make([][]string, l, l)
		b = b[l:]
		for k := uint(0); k < l; k++ {
			{
				l := uint(order.Uint32(b[:4]))
				b = b[4:]
				i.sss[k] = make([]string, l, l)
				b = b[l:]
				for k := uint(0); k < l; k++ {
					{
						n := order.Uint32(b)
						i.sss[k][k] = string(b[4 : 4+n])
						b = b[4+n:]
					}
				}
			}
		}
	}
	{
		l := uint(order.Uint32(b[:4]))
		b = b[4:]
		m := make(map[string]string)
		for k := uint(0); k < l; k++ {
			var key string
			var value string
			{
				n := order.Uint32(b)
				key = string(b[4 : 4+n])
				b = b[4+n:]
			}
			{
				n := order.Uint32(b)
				value = string(b[4 : 4+n])
				b = b[4+n:]
			}
			m[key] = value
		}
		i.ms = m
	}
	{
		l := uint(order.Uint32(b[:4]))
		b = b[4:]
		m := make(map[string]map[string]string)
		for k := uint(0); k < l; k++ {
			var key string
			var value map[string]string
			{
				n := order.Uint32(b)
				key = string(b[4 : 4+n])
				b = b[4+n:]
			}
			{
				l := uint(order.Uint32(b[:4]))
				b = b[4:]
				m := make(map[string]string)
				for k := uint(0); k < l; k++ {
					var key string
					var value string
					{
						n := order.Uint32(b)
						key = string(b[4 : 4+n])
						b = b[4+n:]
					}
					{
						n := order.Uint32(b)
						value = string(b[4 : 4+n])
						b = b[4+n:]
					}
					m[key] = value
				}
				value = m
			}
			m[key] = value
		}
		i.mms = m
	}
	i.si.uint64 = uint64(order.Uint64(b[:8]))
	b = b[8:]
	i.C.Deserialize(b, order)
	b = b[i.C.SerializeLen():]
}
